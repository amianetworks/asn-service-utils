// Copyright 2025 Amiasys Corporation and/or its affiliates. All rights reserved.

syntax = "proto3";

option go_package = "./;proto";

package asn_controller;

service Manager {
  // ASNC related operations
  rpc GetInfo (Empty) returns (ControllerInfo);
  rpc UpdatePort (UpdatePortReq) returns (Empty);

  // Authentication & Authorization API
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc MfaLogin (MfaLoginRequest) returns (LoginResponse);
  rpc TokenRefresh (TokenRefreshRequest) returns (LoginResponse);
  rpc ResetPassword (LoginRequest) returns (Empty);
  rpc Logout (Empty) returns (Empty);
  rpc GetUserByToken (Empty) returns (User);

  // User API
  rpc GetUsersByNames (User.Names) returns (User.List); // User Info by name
  rpc ListUsers (User.ListReq) returns (User.Names);
  rpc CreateUser (User.Create) returns (Empty);
  rpc DeleteUser (User.Name) returns (Empty);

  // User Group API
  rpc GetUserGroupsOfService (UserGroup.GetReq) returns (UserGroup.List); // User Group info by name
  rpc ListUserGroupsOfServices (Node.Service.Names) returns (UserGroup.UnderService);
  rpc CreateUserGroup (UserGroup.Create) returns (Empty);
  rpc UpdateUserGroup (UserGroup.Update) returns (Empty);
  rpc DeleteUserGroup (UserGroup.Name) returns (Empty);
  rpc AddUsersToGroup (UserGroup.UserReq) returns (Empty);
  rpc RemoveUsersFromGroup (UserGroup.UserReq) returns (Empty);

  // Network API
  rpc ImportTopoFromFile (NetworkTopo) returns (Empty);         // Load topo networks through files
  rpc GetRootNetworks (Empty) returns (Network.Roots); // Basic info of Network roots.
  rpc GetSubNetworks (Network.GetReq) returns (Network.Info);  // Get all subnetworks, including itself, without nodes. Network link is optional.
  rpc CreateNetwork (Network.Create) returns (Empty);
  rpc UpdateNetwork (Network.Update) returns (Empty);
  rpc DeleteNetwork (Network.Id) returns (Empty);

  // Nodes API
  rpc GetNodesByIds (Node.GetReq) returns (Node.List);  // Node details.
  rpc GetNodesOfNetwork (Node.ListReq) returns (Node.Ids);   // All nodes in the network and its subnetworks.
  rpc GetNodesOfNodeGroup (NodeGroup.Id) returns (Node.Ids);   // Nodes in the given Node Group.
  rpc CreateNode (Node.Create) returns (Empty);
  rpc UpdateNode (Node.Update) returns (Empty);
  rpc DeleteNode (Node.Id) returns (Empty);

  // Node Group API
  rpc GetNodeGroupsByIds (NodeGroup.Ids) returns (NodeGroup.List); // Node Group info
  rpc GetNodeGroupsOfServices (Node.Service.Names) returns (NodeGroup.Ids);  // Node Group of Services specified in the request.
  rpc CreateNodeGroup (NodeGroup.Create) returns (Empty);
  rpc UpdateNodeGroup (NodeGroup.Update) returns (Empty);
  rpc DeleteNodeGroup (NodeGroup.Id) returns (Empty);

  // Link API
  rpc GetLinksOfNetwork (Network.Id) returns (Node.Link.List); // All links of a network. Internal and External.
  rpc CreateLink (Node.Link.Create) returns (Empty);
  rpc UpdateLink (Node.Link.Update) returns (Empty);
  rpc DeleteLink (Node.Link.Id) returns (Empty);

  // Service API: Info or Name? ???
  rpc GetAllServices (Empty) returns (Node.Service.Names); // All available service names.
  rpc GetServicesOfNetwork (Network.Id) returns (Node.Service.Names); // Services available in the network.
  rpc GetServicesOfNodeGroup (NodeGroup.Id) returns (Node.Service.Names); // Services available in the node group.
  rpc GetServicesOfNode (Node.Id) returns (Node.Service.Names); // Services available on the node.

  // Service API: Start
  rpc StartServiceOnNetwork (Config.Request) returns (Empty);
  rpc StartServiceOnNodeGroup (Config.Request) returns (Empty);
  rpc StartServiceOnNode (Config.Request) returns (Empty);

  // Service API: Stop
  rpc StopServiceOnNetwork (Config.Request) returns (Empty);
  rpc StopServiceOnNodeGroup (Config.Request) returns (Empty);
  rpc StopServiceOnNode (Config.Request) returns (Empty);

  // Service API: Reset
  rpc ResetServiceOnNetwork (Config.Request) returns (Empty);
  rpc ResetServiceOnNodeGroup (Config.Request) returns (Empty);
  rpc ResetServiceOnNode (Config.Request) returns (Empty);

  // Service API: Apply Ops (Internal Use)
  rpc ApplyServiceOpsOnNetwork (Ops.Request) returns (Ops.Response);
  rpc ApplyServiceOpsOnNodeGroup (Ops.Request) returns (Ops.Response);
  rpc ApplyServiceOpsOnNode (Ops.Request) returns (Ops.Response);

  // Stats
  rpc GetStatsOfNetwork (Network.Id) returns (Network.Stats);      // Numbers of networks, nodes, links, node groups, etc., of a Network.
  rpc GetStatsOfNodes (Network.Id) returns (Node.Stats);         // Numbers of nodes in different states in a network.
  rpc GetStatsOfServices (Node.Service.Stats.GetReq) returns (Node.Service.Stats); // Numbers of service nodes in different states of a network. For specified services.

  // Service Metrics
  rpc GetMetricsOfService (Node.Service.Metrics.GetReq) returns (Node.Service.Metrics); // Metrics in key-value pairs.
}

/*
 * Common
 */
message Empty {}

message Location {
  float latitude = 1;
  float longitude = 2;
  float altitude = 3;
  string address = 4;
  string description = 5;
  string location_tier = 6;
}

/*
 * Info
 */
message ControllerInfo {
  string asnc_version = 1;
  map<string, string> service_versions = 2;
  uint32 port = 3;
  uint32 port_pending = 4;
}

message UpdatePortReq {
  uint32 port = 1;
}

/*
 * Login
 */
message LoginRequest {
  string username = 1;
  string password = 2;
  string device_id = 3;
}

message MfaLoginRequest {
  string access_token = 1;
  string code = 2;
}

message TokenRefreshRequest {
  string access_token = 1;
  string refresh_token = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  bool need_mfa = 3;
}

/*
 * User and User Group
 */
message User {
  string username = 1;
  string email = 2;
  Phone phone = 3;
  map<string, Array> groups = 4;
  map<string, Array> services = 5;
  map<string, Array> networks = 6;

  message Name {
    string username = 1;
  }

  message Names {
    repeated string usernames = 1;
  }

  message Create {
    string username = 1;
    string password = 2;
    string email = 3;
    Phone phone = 4;
  }

  message ListReq {
    bool asn_only = 1;
  }

  message List {
    repeated User users = 1;
  }

  message Array {
    repeated string values = 1;
  }

  message Phone {
    string country_code = 1;
    string number = 2;
  }
}

message UserGroup {
  string name = 1;
  string service_name = 2;
  Type type = 3;
  string remark = 4;

  int64 user_total = 5;
  repeated string usernames = 6;

  repeated string services = 7;
  repeated string networks = 8;
  repeated string operations = 9;

  message Name {
    string service_name = 1;
    string user_group_name = 2;
  }

  message Names {
    repeated string user_group_names = 1;
  }

  message UnderService {
    map<string, Names> user_groups = 1;
  }

  message GetReq {
    string service_name = 1;
    repeated string user_group_names = 2;
  }

  message List {
    repeated UserGroup user_groups = 1;
  }

  message Create {
    string name = 1;
    string service_name = 2;
    Type type = 3;
    string remark = 4;
    repeated string services = 5;
    repeated string networks = 6;
    repeated string operations = 7;
  }

  message Update {
    string name = 1;
    string service_name = 2;
    string remark = 3;
    repeated string services = 4;
    repeated string networks = 5;
    repeated string operations = 6;
  }

  message UserReq {
    string service_name = 1;
    string user_group_name = 2;
    repeated string usernames = 3;
  }

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_SERVICE = 1;
    TYPE_NETWORK = 2;
  }
}

/*
 * Network Topology: Network, Node, Location, etc.
 */
message NetworkTopo {
  bytes raw_data = 1;
}

message Network {
  string network_id = 1;
  string name = 2;
  string description = 3;
  string parent_network_id = 4;
  repeated string network_tiers = 5;
  Location location = 6;
  repeated Network networks = 7;

  message Root {
    string network_id = 1;
    string name = 2;
    string description = 3;
    repeated string location_tiers = 4;
    repeated string network_tiers = 5;
  }

  message Roots {
    repeated Root root_networks = 1;
  }

  message GetReq {
    string network_id = 1;
    repeated string location_tiers = 2;
    repeated string network_tiers = 3;
    bool include_links = 4;
  }

  message Info {
    Network network = 1;
    repeated Network.Link links = 6;
  }

  message Id {
    string network_id = 1;
  }

  message Create {
    string parent_network_id = 1;
    string name = 2;
    string description = 3;
    repeated string network_tiers = 4;
    Location location = 5;
  }

  message Update {
    string network_id = 1;
    string parent_network_id = 2;
    string name = 3;
    string description = 4;
    repeated string network_tiers = 5;
    Location location = 6;
  }

  message Link {
    string from_network = 1;
    string to_network = 2;
    uint64 bandwidth = 3;
  }

  message Stats {
    int64 number_of_networks = 1;
    int64 number_of_nodes = 2;
    int64 number_of_internal_links = 3;
    int64 number_of_external_links = 4;
    int64 number_of_node_groups = 5;
  }
}

message Node {
  string node_id = 1;
  Type type = 2;
  string name = 3;
  string description = 4;
  string network_id = 5;
  Location location = 6;
  bool managed = 7;
  Ipmi ipmi = 8;
  Management management = 9;
  Info info = 10;
  repeated Interface interfaces = 11;

  ServiceNode service_node = 12;

  message GetReq {
    repeated string node_ids = 1;
    bool include_links = 2;
  }

  message ListReq {
    string network_id = 1;
    bool include_subnetwork = 2;
  }

  message List {
    repeated Node nodes = 1;
    repeated Node.Link internal_links = 2;
    repeated Node.Link external_links = 3;
  }

  message Id {
    string node_id = 1;
  }

  message Ids {
    repeated string node_ids = 1;
  }

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_ROUTER = 1;        // router
    TYPE_SWITCH = 2;        // switch
    TYPE_APPLIANCE = 3;     // appliance
    TYPE_FIREWALL = 4;      // firewall
    TYPE_LOAD_BALANCER = 5; // lb
    TYPE_ACCESS_POINT = 6;  // ap
    TYPE_DEVICE = 7;        // device
    TYPE_SERVER = 8;        // server
  }

  message Create {
    string parent_network_id = 1;
    Type type = 2;
    string name = 3;
    string description = 4;
    Location location = 5;
    Ipmi ipmi = 6;
    Management management = 7;
    Info info = 8;
    repeated Interface interfaces = 9;
  }

  message Update {
    string node_id = 1;
    string parent_network_id = 2;
    Type type = 3;
    string name = 4;
    string description = 5;
    Location location = 6;
    Ipmi ipmi = 7;
    Management management = 8;
    Info info = 9;
    repeated Interface interfaces = 10;
  }

  message Ipmi {
    string ip = 1;
    string username = 2;
    string key = 3;
  }

  message Management {
    string hostname = 1;
    string ip = 2;
  }

  message Info {
    string vendor = 1;
    string model = 2;
    string serial_number = 3;
  }

  message Interface {
    string name = 1;
    string ip = 2;
    repeated string tags = 3;
  }

  message Link {
    string link_id = 1;
    string description = 2;
    string from_node = 3;
    string from_interface = 4;
    string to_node = 5;
    string to_interface = 6;
    uint64 bandwidth = 7;

    message Id {
      string link_id = 1;
    }

    message List {
      repeated Link internal_links = 1;
      repeated Link external_links = 2;
    }

    message Create {
      string from_node = 1;
      string from_interface = 2;
      string to_node = 3;
      string to_interface = 4;
      uint64 bandwidth = 5;
      string description = 6;
    }

    message Update {
      string link_id = 1;
      string from_interface = 2;
      string to_interface = 3;
      uint64 bandwidth = 4;
      string description = 5;
    }
  }

  message Stats {
    message Stat {
      NodeState state = 1;
      int64 count = 2;
    }

    message Type {
      string type = 1;
      int64 count = 2;
    }

    repeated Stat states = 1;
    repeated Type types = 2;
  }

  enum NodeState {
    STATE_UNREGISTERED = 0;
    STATE_OFFLINE = 1;
    STATE_ONLINE = 2;
    STATE_MAINTENANCE = 3;
  }

  enum ServiceState {
    STATE_UNAVAILABLE = 0;
    STATE_UNINITIALIZED = 1;
    STATE_INITIALIZED = 2;
    STATE_CONFIGURING = 3;
    STATE_RUNNING = 4;
    STATE_MALFUNCTIONING = 5;
  }

  message ServiceNode {
    message SystemInfo {
      string machine_id = 1;
      int64 cpu_core = 2;
      int64 memory = 3;
      int64 disk = 4;
    }

    message Service {
      string name = 1;
      ServiceState state = 2;
      string config = 3;
    }

    NodeState state = 1;
    SystemInfo system_info = 2;
    repeated Interface interfaces = 3;
    repeated Service services = 4;
  }

  message Service {
    message Name {
      string service_name = 1;
    }

    message Names {
      repeated string service_names = 1;
    }

    message Stats {
      map<string, Inner> stats = 1;

      message Inner {
        repeated Stat stats = 1;
      }

      message GetReq {
        string network_id = 1;
        repeated string service_names = 2;
      }

      message Stat {
        ServiceState state = 1;
        int64 count = 2;
      }
    }

    message Metrics {
      map<string, string> metrics = 1;

      message GetReq {
        string network_id = 1;
        string service_name = 2;
      }
    }
  }
}

message NodeGroup {
  string node_group_id = 1;
  string name = 2;
  string remark = 3;
  repeated string nodes = 4;
  map<string, string> services = 5;

  message Id {
    string node_group_id = 1;
  }

  message Ids {
    repeated string node_group_ids = 1;
  }

  message List {
    repeated NodeGroup groups = 1;
  }

  message Create {
    string name = 1;
    string remark = 2;
    repeated string nodes = 3;
    map<string, string> services = 4;
  }

  message Update {
    string node_group_id = 1;
    string name = 2;
    string remark = 3;
    repeated string nodes = 4;
    map<string, string> services = 5;
  }
}

/*
 * Service and Configure
 */
message Config {
  message Request {
    string id = 1;
    string service_name = 2;
    bytes config = 3;
  }
}

message Ops {
  message Request {
    string id = 1;
    string service_name = 2;
    string command = 3;
    string params = 4;
  }

  message Response {
    repeated Inner responses = 1;

    message Inner {
      string id = 1;
      bool success = 2;
      string response = 3;
      string error = 4;
    }
  }
}
