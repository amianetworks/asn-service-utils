// Copyright 2025 Amiasys Corporation and/or its affiliates. All rights reserved.

syntax = "proto3";

option go_package = "./;proto";

package asn_controller;

service Manager {
  // ASNC related operations
  rpc GetInfo     (Empty)         returns (ControllerInfo);
  rpc UpdatePort  (UpdatePortReq) returns (Empty);

  // Authentication & Authorization API
  rpc Login           (LoginRequest)        returns (LoginResponse);
  rpc MfaLogin        (MfaLoginRequest)     returns (LoginResponse);
  rpc TokenRefresh    (TokenRefreshRequest) returns (LoginResponse);
  rpc ResetPassword   (LoginRequest)        returns (Empty);
  rpc Logout          (Empty)               returns (Empty);
  rpc GetUserByToken  (Empty)               returns (User);

  // User API
  rpc GetUsersByNames (Usernames)         returns (Users);
  rpc ListUsers       (ListUsersReq)      returns (Users);
  rpc CreateUser      (CreateUserRequest) returns (Empty);
  rpc DeleteUser      (Username)          returns (Empty);

  // User Group API
  rpc ListUserGroups          (GroupName)         returns (UserGroups);
  rpc GetUserGroup            (GroupName)         returns (UserGroup);
  rpc CreateUserGroup         (UserGroup.Request) returns (Empty);
  rpc UpdateUserGroup         (UserGroup.Request) returns (Empty);
  rpc DeleteUserGroup         (GroupName)         returns (Empty);
  rpc AddUsersToGroup         (GroupUsersRequest) returns (Empty);
  rpc RemoveUsersFromGroup    (GroupUsersRequest) returns (Empty);

  // Network API
  rpc GetRootNetworks (Empty)           returns (RootNetworks); // Basic info of Root Networks.
  rpc GetSubNetworks  (GetNetworkReq)   returns (NetworkInfo);  // Get all subnetworks, including itself. With or without Network Links. No Nodes.
  rpc CreateNetwork   (Network.Create)  returns (Empty);
  rpc UpdateNetwork   (Network.Update)  returns (Empty);
  rpc DeleteNetwork   (Id)              returns (Empty);

  // Nodes API
  rpc GetNodesOfNetwork   (Id)          returns (Nodes);
  rpc GetNodesOfNodeGroup (Id)          returns (Nodes);
  rpc GetNodeById         (Id)          returns (Nodes); // Node details
  rpc CreateNode          (Node.Create) returns (Empty);
  rpc UpdateNode          (Node.Update) returns (Empty);
  rpc DeleteNode          (Id)          returns (Empty);

  // Node Group API
  rpc GetNodeGroups     (GetNodeGroupsReq)  returns (NodeGroups); // NG of Services specified in the request.
  rpc GetNodeGroupById  (Id)                returns (NodeGroup);
  rpc CreateNodeGroup   (NodeGroup.Create)  returns (Empty);
  rpc UpdateNodeGroup   (NodeGroup.Update)  returns (Empty);
  rpc DeleteNodeGroup   (Id)                returns (Empty);

  // Link API
  rpc GetLinksOfNetwork (Id)                returns (Node.Links); // All links of a network. Internal and External.
  rpc CreateLink        (Node.Link.Create)  returns (Empty);
  rpc UpdateLink        (Node.Link.Update)  returns (Empty);
  rpc DeleteLink        (Id)                returns (Empty);

  // Service API: Info
  rpc GetAllServices          (Empty) returns (Services);
  rpc GetServicesOfNetwork    (Id)    returns (Services); // Services available on the network.
  rpc GetServicesOfNode       (Id)    returns (Services); // Services available on the node.
  rpc GetServicesOfNodeGroup  (Id)    returns (Services); // Services available on the node group.

  // Service API: Start
  rpc StartServiceOnNetwork   (Config.Request)  returns (Config.Response);
  rpc StartServiceOnNodeGroup (Config.Request)  returns (Config.Response);
  rpc StartServiceOnNode      (Config.Request)  returns (Config.Response);

  // Service API: Stop
  rpc StopServiceOnNetwork    (Config.Request)  returns (Config.Response);
  rpc StopServiceOnNodeGroup  (Config.Request)  returns (Config.Response);
  rpc StopServiceOnNode       (Config.Request)  returns (Config.Response);

  // Service API: Reset
  rpc ResetServiceOnNetwork   (Config.Request)  returns (Config.Response);
  rpc ResetServiceOnNodeGroup (Config.Request)  returns (Config.Response);
  rpc ResetServiceOnNode      (Config.Request)  returns (Config.Response);

  // Service API: Apply Ops (Internal Use)
  rpc ApplyServiceOps (Ops.Request) returns (Ops.Response);

  // Stats
  rpc GetStatsOfNetwork   (Id)            returns (Network.Stats);  // Numbers of networks, nodes, links, node groups, etc., of a Network.
  rpc GetStatsOfNodes     (Id)            returns (Node.Stats);     // Numbers of nodes in different states in a network.
  rpc GetStatsOfServices  (IdAndServices) returns (Service.Stats);  // Numbers of service nodes in different states of a network. For specified services.

  // Service Metrics
  rpc GetMetricsOfService (IdAndService)  returns (Service.Metrics);  // Metrics in key-value pairs.
}

message Empty {}

/*
  Request message
 */
message ListUsersReq {
  int64 page = 1;
  int64 page_size = 2;
  bool asn_only = 3;
}

message GetNodeGroupsReq {
  int64 page = 1;
  int64 page_size = 2;
  repeated string services = 3;
}

message ControllerInfo {
  string asnc_version = 1;
  map<string, string> service_versions = 2;
  uint32 port = 3;
  uint32 port_pending = 4;
}

message UpdatePortReq {
  uint32 port = 1;
}

message Id {
  string id = 1;
}

message Services {
  repeated string service_names = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
  string device_id = 3;
}

message MfaLoginRequest {
  string access_token = 1;
  string code = 2;
}

message TokenRefreshRequest {
  string access_token = 1;
  string refresh_token = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  bool need_mfa = 3;
}

message CreateUserRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  Phone phone= 4;
}

message Username {
  string username = 1;
}

message Usernames {
  repeated string usernames = 1;
}

message GroupUsersRequest {
  string service_name = 1;
  string group_name = 2;
  repeated string usernames = 3;
}

message GetNetworkReq {
  string network_id = 1;
  repeated string location_tiers = 2;
  repeated string network_tiers = 3;
  bool include_links = 4;
}

message RootNetworks {
  message Network {
    string id = 1;
    string name = 2;
    string description = 3;
    repeated string location_tiers = 4;
    repeated string network_tiers = 5;
  }

  repeated Network networks = 1;
}

message Users {
  repeated User users = 1;
  int64 total = 2;
}

message User {
  message Array {
    repeated string values = 1;
  }

  string username = 1;
  string email = 2;
  Phone phone = 3;
  map<string, Array> groups = 4;
  map<string, Array> services = 5;
  map<string, Array> networks = 6;
}

message Phone {
  string country_code = 1;
  string number = 2;
}

message UserGroups {
  repeated UserGroup groups = 1;
}



message UserGroup {
  string name = 1;
  string service_name = 2;
  Type type = 3;
  string remark = 4;

  int64 user_total = 5;
  repeated string usernames = 6;

  repeated string services = 7;
  repeated string networks = 8;
  repeated string operations = 9;

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_SERVICE = 1;
    TYPE_NETWORK = 2;
  }

  message Request {
    string name = 1;
    Type type = 2;
    string remark = 3;
    repeated string services = 4;
    repeated string networks = 5;
    repeated string operations = 6;
  }
}

message GroupName {
  string name = 1;
  string service_name = 2;
}

message Config {
  message Request {
    string id = 1;
    string service_name = 2;
    bytes config = 3;
  }

  message Response {
    message Inner {
      string id = 1;
      bool success = 2;
      string err_msg = 3;
    }

    repeated Inner responses = 1;
  }
}

message Ops {
  message Request {
    string network = 1;
    bool include_subnetworks = 2;
    string group = 3;
    repeated string service_nodes = 4;
    string service_name = 5;
    string command = 6;
    string params = 7;
  }

  message Response {
    message Inner {
      string id = 1;
      bool success = 2;
      string response = 3;
      string error = 4;
    }

    repeated Inner responses = 1;
  }
}

message IdAndService {
  string id = 1;
  string service = 2;
}

message IdAndServices {
  string id = 1;
  repeated string services = 2;
}

/*
  Utils message
 */
message Location {
  float latitude = 1;
  float longitude = 2;
  float altitude = 3;
  string address = 4;
  string description = 5;
  string location_tier = 6;
}

/*
  Network message
 */
message NetworkInfo {
  Network network = 1;
  repeated Network.Link links = 6;
}

message Network {
  string id = 1;
  string name = 2;
  string description = 3;
  string parent_id = 4;
  repeated string network_tiers = 5;
  Location location = 6;
  repeated Network networks = 7;

  message Create {
    string parent_id = 1;
    string name = 2;
    string description = 3;
    repeated string network_tiers = 4;
    Location location = 5;
  }

  message Update {
    string id = 1;
    string parent_id = 2;
    string name = 3;
    string description = 4;
    repeated string network_tiers = 5;
    Location location = 6;
  }

  message Link {
    string from_network = 1;
    string to_network = 2;
    uint64 bandwidth = 3;

    LinkStats stats = 4;
  }

  message Stats {
    int64 number_of_networks = 1;
    int64 number_of_nodes = 2;
    int64 number_of_links = 3;
    int64 number_of_node_groups = 4;
  }
}

message Nodes {
  repeated Node nodes = 1;
  repeated Node.Link internal_links = 2;
  repeated Node.Link external_links = 3;
}

message Node {
  string id = 1;
  Type type = 2;
  string name = 3;
  string description = 4;
  string network_id = 5;
  Location location = 6;
  bool managed = 7;
  Ipmi ipmi = 8;
  Management management = 9;
  Info info = 10;
  repeated Interface interfaces = 11;

  ServiceNode service_node = 12;

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_ROUTER = 1;        // router
    TYPE_SWITCH = 2;        // switch
    TYPE_APPLIANCE = 3;     // appliance
    TYPE_FIREWALL = 4;      // firewall
    TYPE_LOAD_BALANCER = 5; // lb
    TYPE_ACCESS_POINT = 6;  // ap
    TYPE_DEVICE = 7;        // device
    TYPE_SERVER = 8;        // server
  }

  message Create {
    string parent_id = 1;
    Type type = 2;
    string name = 3;
    string description = 4;
    Location location = 5;
    bool managed = 6;
    Ipmi ipmi = 7;
    Management management = 8;
    Info info = 9;
    repeated Interface interfaces = 10;
  }

  message Update {
    string id = 1;
    string parent_id = 2;
    Type type = 3;
    string name = 4;
    string description = 5;
    Location location = 6;
    bool managed = 7;
    Ipmi ipmi = 8;
    Management management = 9;
    Info info = 10;
    repeated Interface interfaces = 11;
  }

  message Ipmi {
    string ip = 1;
    string username = 2;
    string key = 3;
  }

  message Management {
    string hostname = 1;
    string ip = 2;
  }

  message Info {
    string vendor = 1;
    string model = 2;
    string serial_number = 3;
  }

  message Links {
    repeated Link links = 1;
  }

  message Link {
    message Create {
      string from_node = 1;
      string from_interface = 2;
      string to_node = 3;
      string to_interface = 4;
      uint64 bandwidth = 5;
      string description = 6;
    }

    message Update {
      string id = 1;
      string from_node = 2;
      string from_interface = 3;
      string to_node = 4;
      string to_interface = 5;
      uint64 bandwidth = 6;
      string description = 7;
    }

    string id = 1;
    string description = 2;
    string from_node = 3;
    string from_interface = 4;
    string to_node = 5;
    string to_interface = 6;
    uint64 bandwidth = 7;

    LinkStats stats = 8;
  }

  message Stats {
    message Stat {
      State state = 1;
      int64 count = 2;
    }

    repeated Stat states = 1;
  }

  enum State {
    STATE_UNREGISTERED = 0;
    STATE_OFFLINE = 1;
    STATE_ONLINE = 2;
    STATE_MAINTENANCE = 3;
  }
}

message ServiceNode {
  message SystemInfo {
    string machine_id = 1;
    int64 cpu_core = 2;
    int64 memory = 3;
    int64 disk = 4;
  }

  State state = 1;
  SystemInfo system_info = 2;
  repeated Interface interfaces = 11;

  enum State {
    STATE_UNAVAILABLE = 0;
    STATE_UNINITIALIZED = 1;
    STATE_INITIALIZED = 2;
    STATE_CONFIGURING = 3;
    STATE_RUNNING = 4;
    STATE_MALFUNCTIONING = 5;
  }
}

message Interface {
  string name = 1;
  string ip = 2;
  repeated string tags = 3;
}

message NodeGroups {
  repeated NodeGroup groups = 1;
  int64 total = 2;
}

message NodeGroup {
  string id = 1;
  string name = 2;
  string remark = 3;
  repeated string nodes = 4;
  map<string, string> services = 5;

  message Create {
    string name = 1;
    string remark = 2;
    repeated string nodes = 3;
    map<string, string> services = 4;
  }

  message Update {
    string id = 1;
    string name = 2;
    string remark = 3;
    repeated string nodes = 4;
    map<string, string> services = 5;
  }
}

message LinkStats {
  uint64 inbound = 1;
  uint64 outbound = 2;
}

message Service {
  message Stats {
    message Stat {
      ServiceNode.State state = 1;
      int64 count = 2;
    }

    repeated Stat states = 1;
  }

  message Metrics {
    map<string, string> metrics = 1;
  }
}
