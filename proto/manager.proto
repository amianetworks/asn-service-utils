// Copyright 2025 Amiasys Corporation and/or its affiliates. All rights reserved.

syntax = "proto3";

option go_package = "./;proto";

package asn_controller;

service Manager {
  // ASNC related operations
  rpc GetInfo     (Empty)         returns (ControllerInfo);
  rpc UpdatePort  (UpdatePortReq) returns (Empty);

  // Authentication & Authorization API
  rpc Login           (LoginRequest)        returns (LoginResponse);
  rpc MfaLogin        (MfaLoginRequest)     returns (LoginResponse);
  rpc TokenRefresh    (TokenRefreshRequest) returns (LoginResponse);
  rpc ResetPassword   (LoginRequest)        returns (Empty);
  rpc Logout          (Empty)               returns (Empty);
  rpc GetUserByToken  (Empty)               returns (User);

  // User API
  rpc GetUsersByNames (User.Names)    returns (User.List);  // User Info by name
  rpc ListUsers       (User.ListReq)  returns (User.Names);
  rpc CreateUser      (User.Create)   returns (Empty);
  rpc DeleteUser      (User.Name)     returns (Empty);

  // User Group API
  rpc GetUserGroups             (UserGroup.GetReq)    returns (UserGroup.List);         // User Group info by name
  rpc ListUserGroups            (UserGroup.ListReq)   returns (UserGroup.Names);
  rpc CreateUserGroup           (UserGroup.Create)    returns (Empty);
  rpc UpdateUserGroup           (UserGroup.Update)    returns (Empty);
  rpc DeleteUserGroup           (UserGroup.Name)      returns (Empty);
  rpc AddUsersToGroup           (UserGroup.UserReq)   returns (Empty);
  rpc RemoveUsersFromGroup      (UserGroup.UserReq)   returns (Empty);

  // Network API
  rpc ImportTopoFromFile      (NetworkTopo)     returns (Empty);              // Load topo networks through files
  rpc ListAvailableNetworks   (Empty)           returns (Network.List);       // List the network that the user can view/manage. Just the basic topo info, without node
  rpc DisplayNetworks         (Network.GetReq)  returns (Network.Display);    // Get subnetworks, nodes and link need display.
  rpc GetNetworkTopo          (Network.Id)      returns (Network);            // Get network topo info
  rpc CreateNetwork           (Network.Create)  returns (Empty);
  rpc UpdateNetwork           (Network.Update)  returns (Empty);
  rpc DeleteNetwork           (Network.Id)      returns (Empty);

  // Nodes API
  rpc GetNodesByIds         (Node.GetReq)     returns (Node.List);    // Node details.
  rpc GetNodesOfNetwork     (Node.ListReq)    returns (Node.Infos);   // All nodes in the network and its subnetworks.
  rpc GetNodesOfNodeGroup   (NodeGroup.Id)    returns (Node.Infos);   // Nodes in the given Node Group.
  rpc SetNodeServiceConfig  (Node.SetConfig)  returns (Empty);
  rpc CreateNode            (Node.Create)     returns (Empty);
  rpc UpdateNode            (Node.Update)     returns (Empty);
  rpc DeleteNode            (Node.Id)         returns (Empty);

  // Node Group API
  rpc GetNodeGroupsByIds      (NodeGroup.Ids)       returns (NodeGroup.List); // Node Group info
  rpc GetNodeGroupsOfServices (Node.Service.Name)  returns (NodeGroup.Ids);  // Node Group of Services specified in the request.
  rpc GetNodeGroupsOfNetwork  (Network.Id)          returns (NodeGroup.Ids);  // Node Group in the network.
  rpc CreateNodeGroup         (NodeGroup.Create)    returns (Empty);
  rpc UpdateNodeGroup         (NodeGroup.Update)    returns (Empty);
  rpc DeleteNodeGroup         (NodeGroup.Id)        returns (Empty);

  // Link API
  rpc GetLinksOfNode    (Node.Id)      returns (Link.List); // All links of a network. Internal and External.
  rpc CreateLink        (Link.Create)  returns (Empty);
  rpc UpdateLink        (Link.Update)  returns (Empty);
  rpc DeleteLink        (Link.Id)      returns (Empty);

  // Service API: Info or Name? ???
  rpc GetAllServices          (IncludeAsn)         returns (Node.Service.Names);  // All available service names.
  rpc GetServicesOfNetwork    (Network.Id)    returns (Node.Service.Names);       // Services available in the network.
  rpc GetServicesOfNodeGroup  (NodeGroup.Id)  returns (Node.Service.Names);       // Services available in the node group.
  rpc GetServicesOfNode       (Node.Id)       returns (Node.Service.Names);       // Services available on the node.

  // Service API: Start
  rpc StartServiceOnNetwork   (Ops.GeneralReq) returns (Empty);
  rpc StartServiceOnNodeGroup (Ops.GeneralReq) returns (Empty);
  rpc StartServiceOnNode      (Ops.GeneralReq) returns (Empty);

  // Service API: Stop
  rpc StopServiceOnNetwork    (Ops.GeneralReq) returns (Empty);
  rpc StopServiceOnNodeGroup  (Ops.GeneralReq) returns (Empty);
  rpc StopServiceOnNode       (Ops.GeneralReq) returns (Empty);

  // Service API: Reset
  rpc ResetServiceOnNetwork   (Ops.GeneralReq) returns (Empty);
  rpc ResetServiceOnNodeGroup (Ops.GeneralReq) returns (Empty);
  rpc ResetServiceOnNode      (Ops.GeneralReq) returns (Empty);

  // Service API: Apply Ops (Internal Use)
  rpc ApplyServiceOpsOnNetwork    (Ops.Request) returns (Ops.Response);
  rpc ApplyServiceOpsOnNodeGroup  (Ops.Request) returns (Ops.Response);
  rpc ApplyServiceOpsOnNode       (Ops.Request) returns (Ops.Response);

  // Stats
  rpc GetStatsOfNetwork   (Network.Id)                returns (Network.Stats);      // Numbers of networks, nodes, links, node groups, etc., of a Network.
  rpc GetStatsOfNodes     (Network.Id)                returns (Node.Stats);         // Numbers of nodes in different states in a network.
  rpc GetStatsOfServices  (Node.Service.Stats.GetReq) returns (Node.Service.Stats); // Numbers of service nodes in different states of a network. For specified services.

  // Service Metrics
  rpc GetMetricsOfService (Node.Service.Metrics.GetReq) returns (Node.Service.Metrics); // Metrics in key-value pairs.
}

/*
 * Common
 */
message Empty {}

message Location {
  float latitude = 1;
  float longitude = 2;
  float altitude = 3;
  string address = 4;
  string description = 5;
  string location_tier = 6;
}

message IncludeAsn {
  bool include_asn = 1;
}

/*
 * Info
 */
message ControllerInfo {
  string asnc_version = 1;
  map<string, string> service_versions = 2;
  uint32 port = 3;
  uint32 port_pending = 4;
}

message UpdatePortReq {
  uint32 port = 1;
}

/*
 * Login
 */
message LoginRequest {
  string username = 1;
  string password = 2;
  string device_id = 3;
}

message MfaLoginRequest {
  string access_token = 1;
  string code = 2;
}

message TokenRefreshRequest {
  string access_token = 1;
  string refresh_token = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  bool need_mfa = 3;
}

/*
 * User and User Group
 */
message User {
  string username = 1;
  string email = 2;
  Phone phone = 3;
  map<string, Array> groups = 4;
  map<string, Array> services = 5;
  map<string, Array> networks = 6;

  message Name {
    string username = 1;
  }

  message Names {
    repeated string usernames = 1;
  }

  message Create {
    string username = 1;
    string password = 2;
    string email = 3;
    Phone phone = 4;
  }

  message ListReq {
    bool asn_only = 1;
  }

  message List {
    repeated User users = 1;
  }

  message Array {
    repeated string values = 1;
  }

  message Phone {
    string country_code = 1;
    string number = 2;
  }
}

message UserGroup {
  string name = 1;
  bool default = 2;
  Type type = 3;
  string remark = 4;

  int64 user_total = 5;
  repeated string usernames = 6;

  repeated string services = 7;
  repeated string networks = 8;
  repeated string operations = 9;

  message Name {
    string service_name = 1;
    string user_group_name = 2;
  }

  message Names {
    message GroupNames {
      repeated string names = 1;
    }
    map <int64, GroupNames>  user_groups = 1;
  }

  message GetReq {
    repeated string user_group_names = 1;
  }

  message ListReq {
    repeated int64 types = 1;
  }

  message List {
    repeated UserGroup groups = 1;
  }

  message Create {
    string name = 1;
    Type type = 2;
    string remark = 3;
    repeated string services = 4;
    repeated string networks = 5;
    repeated string operations = 6;
  }

  message Update {
    string name = 1;
    string remark = 2;
    repeated string services = 3;
    repeated string networks = 4;
    repeated string operations = 5;
  }

  message UserReq {
    string service_name = 1;
    string user_group_name = 2;
    repeated string usernames = 3;
  }

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_SERVICE = 1;
    TYPE_NETWORK = 2;
  }
}

/*
 * Network Topology: Network, Node, Location, etc.
 */
message NetworkTopo {
  bytes raw_data = 1;
}

message Network {
  string network_id = 1;
  string name = 2;
  string description = 3;
  string parent_network_id = 4;
  repeated string network_tiers = 5;
  Location location = 6;
  repeated Network subnets = 7;
  repeated Node.Info nodes = 8;

  message List {
    message Topo {
      string network_id = 1;
      string name = 2;
      repeated Topo subnets = 3;
    }

    repeated Topo networks = 1;
  }

  message GetReq {
    string network_id = 1;
    string location_tier = 2;
  }

  message Display {
    message Info {
      string network_id = 1;
      string name = 2;
      string description = 3;
      string parent_network_id = 4;
      repeated string network_tiers = 5;
      Location location = 6;
    }

    repeated Info networks = 1;
    repeated Node.Info nodes = 2;
    repeated Link links = 3;
    repeated string location_tiers = 4;
  }

  message Id {
    string network_id = 1;
  }

  message Create {
    string parent_network_id = 1;
    string name = 2;
    string description = 3;
    repeated string network_tiers = 4;
    Location location = 5;
  }

  message Update {
    string network_id = 1;
    string name = 3;
    string description = 4;
    repeated string network_tiers = 5;
    Location location = 6;
  }

  message Stats {
    int64 number_of_nodes = 1;
    int64 number_of_links = 2;
    int64 number_of_node_groups = 3;
  }
}

message Node {
  string node_id = 1;
  Type type = 2;
  string name = 3;
  string description = 4;
  string network_id = 5;
  Location location = 6;
  bool managed = 7;
  NodeInfo topo_info = 8;
  ServiceNode service_node = 10;

  message GetReq {
    repeated string node_ids = 1;
    bool include_links = 2;
  }

  message ListReq {
    string network_id = 1;
    bool include_subnetwork = 2;
  }

  message List {
    repeated Node nodes = 1;
    repeated Link links = 2;
  }

  message Id {
    string node_id = 1;
  }

  message Infos {
    repeated Info nodes = 1;
  }

  message Info {
    string node_id = 1;
    Type type = 2;
    string name = 3;
    NodeState state = 4;
  }

  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_ROUTER = 1;        // router
    TYPE_SWITCH = 2;        // switch
    TYPE_APPLIANCE = 3;     // appliance
    TYPE_FIREWALL = 4;      // firewall
    TYPE_LOAD_BALANCER = 5; // lb
    TYPE_ACCESS_POINT = 6;  // ap
    TYPE_DEVICE = 7;        // device
    TYPE_SERVER = 8;        // server
  }

  message Create {
    string parent_network_id = 1;
    Type type = 2;
    string name = 3;
    string description = 4;
    bool managed = 5;
    Location location = 6;
    NodeInfo info = 7;
  }

  message Update {
    string node_id = 1;
    Type type = 3;
    string name = 4;
    string description = 5;
    bool managed = 6;
    Location location = 7;
    NodeInfo info = 8;
  }

  message SetConfig {
    string node_id = 1;
    string service_name = 2;
    string config = 3;
  }

  message NodeInfo {
    repeated Interface interfaces = 1;
    Ipmi ipmi = 2;
    Management management = 3;
    Info info = 4;
    Param param = 5;

    message Ipmi {
      bool verify = 1;
      string ip = 2;
      string username = 3;
      string key = 4;
    }

    message Management {
      bool verify = 1;
      string hostname = 2;
      string ip = 3;
    }

    message Info {
      bool verify = 1;
      string vendor = 2;
      string model = 3;
      string serial_number = 4;
    }

    message Param {
      int64 cpu = 1;
      int64 memory = 2;
      int64 disk = 3;
    }

    message Interface {
      string name = 1;
      string ip = 2;
      repeated string tags = 3;
    }
  }

  message Stats {
    message Stat {
      NodeState state = 1;
      int64 count = 2;
    }

    message Type {
      string type = 1;
      int64 count = 2;
    }

    repeated Stat states = 1;
    repeated Type types = 2;
  }

  enum NodeState {
    STATE_UNREGISTERED = 0;
    STATE_OFFLINE = 1;
    STATE_ONLINE = 2;
    STATE_MAINTENANCE = 3;
  }

  enum ServiceState {
    STATE_UNAVAILABLE = 0;
    STATE_UNINITIALIZED = 1;
    STATE_INITIALIZED = 2;
    STATE_CONFIGURING = 3;
    STATE_RUNNING = 4;
    STATE_MALFUNCTIONING = 5;
  }

  message ServiceNode {
    NodeState state = 1;
    string message = 2;
    NodeInfo register_info = 3;
    repeated Service services = 4;

    message Service {
      string name = 1;
      ServiceState state = 2;
      string config = 3;
      string node_group_id = 4;
    }
  }

  message Service {
    message Name {
      string service_name = 1;
    }

    message Names {
      repeated string service_names = 1;
    }

    message Stats {
      map<string, Inner> stats = 1;

      message Inner {
        repeated Stat stats = 1;
      }

      message GetReq {
        string network_id = 1;
        repeated string service_names = 2;
      }

      message Stat {
        ServiceState state = 1;
        int64 count = 2;
      }
    }

    message Metrics {
      map<string, string> metrics = 1;

      message GetReq {
        string network_id = 1;
        string service_name = 2;
      }
    }
  }
}

message Link {
  string link_id = 1;
  string description = 2;
  string from_id = 3;
  bool   from_node = 4;
  string from_interface = 5;
  string to_id = 6;
  bool   to_node = 7;
  string to_interface = 8;
  uint64 bandwidth = 9;

  message Id {
    string link_id = 1;
  }

  message List {
    repeated Link links = 1;
  }

  message Create {
    string from_node_id = 1;
    string from_interface = 2;
    string to_node_id = 3;
    string to_interface = 4;
    uint64 bandwidth = 5;
    string description = 6;
  }

  message Update {
    string link_id = 1;
    string from_node_id = 2;
    string from_interface = 3;
    string to_node_id = 4;
    string to_interface = 5;
    uint64 bandwidth = 6;
    string description = 7;
  }
}

message NodeGroup {
  string node_group_id = 1;
  string name = 2;
  string network_id = 3;
  string service_name = 4;
  string remark = 5;
  repeated string nodes = 6;
  string config = 7;

  message Id {
    string node_group_id = 1;
  }

  message Ids {
    repeated string node_group_ids = 1;
  }

  message List {
    repeated NodeGroup groups = 1;
  }

  message Create {
    string name = 1;
    string network_id = 2;
    string service = 3;
    string remark = 4;
    repeated string nodes = 5;
    string config = 6;
  }

  message Update {
    string node_group_id = 1;
    string name = 2;
    string remark = 3;
    repeated string nodes = 4;
    string config = 5;
  }
}

message Ops {
  message GeneralReq {
    string id = 1;
    string service_name = 2;
  }

  message Request {
    string id = 1;
    string service_name = 2;
    string command = 3;
    string params = 4;
  }

  message Response {
    repeated Inner responses = 1;

    message Inner {
      string id = 1;
      bool success = 2;
      string response = 3;
      string error = 4;
    }
  }
}
